import logging
from flask import Flask, request, render_template, redirect, url_for, Response, redirect
import random
import os
import sqlite3

app = Flask(__name__)

# === –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø ===
import logging
from flask import Flask, request

logging.basicConfig(
    filename='error.log',
    level=logging.WARNING,
    format='%(asctime)s [%(levelname)s] %(message)s',
    encoding='utf-8'
)

app_logger = logging.getLogger(__name__)

# –û–±—â–∏–π —Å—Ç–∏–ª—å
STYLE = '''
    <style>
        body {
            background-color: #e0f7ff;
            font-family: Arial, sans-serif;
            text-align: center;
            padding-top: 50px;
        }
        h1 {
            color: #006699;
        }
        p {
            font-size: 20px;
        }
        a {
            margin: 10px;
            font-size: 18px;
            color: #004466;
            text-decoration: none;
        }
        .counter {
            position: fixed;
            bottom: 10px;
            right: 10px;
            font-size: 14px;
            color: gray;
        }
        button {
            padding: 10px 20px;
            font-size: 16px;
            background-color: #006699;
            color: white;
            border: none;
            border-radius: 5px;
            cursor: pointer;
        }
    </style>
'''

# –°—á—ë—Ç—á–∏–∫ –ø–æ—Å–µ—â–µ–Ω–∏–π
def update_counter():
    filename = "counter.txt"
    if not os.path.exists(filename):
        with open(filename, "w") as f:
            f.write("0")
    with open(filename, "r+") as f:
        count = int(f.read())
        count += 1
        f.seek(0)
        f.write(str(count))
        f.truncate()
    return count

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
import sqlite3

@app.route('/')
def home():
    count = update_counter()

    # –ü–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç –∏–∑ –±–∞–∑—ã
    conn = sqlite3.connect('jokes.db')
    cursor = conn.cursor()
    cursor.execute("SELECT id, text, likes FROM jokes ORDER BY RANDOM() LIMIT 1")
    joke = cursor.fetchone()
    conn.close()

    if joke:
        joke_id, text, likes = joke
    else:
        text = "–ê–Ω–µ–∫–¥–æ—Ç–æ–≤ –Ω–µ—Ç :("
        joke_id = 0
        likes = 0

    return f'''
    <html>
    <head>{STYLE}</head>
    <body>
        <h1>–ê–Ω–µ–∫–¥–æ—Ç –¥–Ω—è</h1>
        <p>{text}</p>

        <form action="/like/{joke_id}" method="post" style="display:inline;">
            <button type="submit">‚ù§Ô∏è –õ–∞–π–∫ ({likes})</button>
        </form>

        <form action="/" method="get" style="display:inline; margin-left: 10px;">
            <button type="submit">üîÅ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞–Ω–µ–∫–¥–æ—Ç</button>
        </form>

        <br><br>
        <a href="/about">–û –Ω–∞—Å</a> | <a href="/contacts">–ö–æ–Ω—Ç–∞–∫—Ç—ã</a>
        <div class="counter">üëÅÔ∏è –ü–æ—Å–µ—â–µ–Ω–∏—è: {count}</div>
    </body>
    </html>
    '''

#–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ª–∞–π–∫–æ–≤
@app.route('/like/<int:joke_id>', methods=['POST'])
def like_joke(joke_id):
    conn = sqlite3.connect('jokes.db')
    cursor = conn.cursor()
    cursor.execute("UPDATE jokes SET likes = likes + 1 WHERE id = ?", (joke_id,))
    conn.commit()
    conn.close()
    return redirect('/')

# –û—Ç–¥–∞—ë—Ç —Å–ª—É—á–∞–π–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç –∏–∑ –±–∞–∑—ã
@app.route('/random')
def random_joke():
    conn = sqlite3.connect('jokes.db')
    cursor = conn.cursor()
    cursor.execute('SELECT text FROM jokes')
    jokes = [row[0] for row in cursor.fetchall()]
    conn.close()

    if jokes:
        return Response(random.choice(jokes), content_type='text/plain; charset=utf-8')
    else:
        return Response("–ê–Ω–µ–∫–¥–æ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.", content_type='text/plain; charset=utf-8')

@app.route('/about')
def about():
    return f'''
    <html>
    <head>{STYLE}</head>
    <body>
        <h1>–û –ø—Ä–æ–µ–∫—Ç–µ</h1>
        <p>–≠—Ç–æ—Ç —Å–∞–π—Ç –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –∞–Ω–µ–∫–¥–æ—Ç—ã, –∞ —Ç–∞–∫–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –Ω–∞–≤—ã–∫–æ–≤ –≤ –Ω–∞–ø–∏—Å–∞–Ω–∏–∏ –∫–æ–¥–∞ –Ω–∞ Python</p>
        <a href="/">–ì–ª–∞–≤–Ω–∞—è</a> | <a href="/contacts">–ö–æ–Ω—Ç–∞–∫—Ç—ã</a>
    </body>
    </html>
    '''

@app.route('/contacts')
def contacts():
    return '''
    <html>
    <head>
        <style>
            body {
                margin: 0;
                padding: 0;
                background-image: url('/static/me.jpg');
                background-size: cover;
                background-position: center;
                font-family: Arial, sans-serif;
                height: 100vh;
            }
            .overlay {
                background-color: rgba(0, 0, 0, 0.5);
                color: white;
                height: 100%;
                width: 100%;
                display: flex;
                flex-direction: column;
                justify-content: center;
                align-items: center;
                text-align: center;
                text-shadow: 0 0 5px black;
            }
            a {
                color: #ffcc00;
                text-decoration: none;
                font-size: 18px;
                margin-top: 20px;
            }
        </style>
    </head>
    <body>
        <div class="overlay">
            <h1>–ö–æ–Ω—Ç–∞–∫—Ç—ã</h1>
            <p>–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π –º–æ–∂–Ω–æ –ø–æ –ø–æ—á—Ç–µ: Danila.Isaev.com</p>
            <a href="/">–ù–∞ –≥–ª–∞–≤–Ω—É—é</a> | <a href="/about">–û –Ω–∞—Å</a>
        </div>
    </body>
    </html>
    '''
# –û–±—Ä–∞–±–æ—Ç–∫–∞ 404 ‚Äî –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
@app.errorhandler(404)
def page_not_found(e):
    app.logger.error(f"–û—à–∏–±–∫–∞ 404: {request.path} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
    return '''
    <html><head><title>–û—à–∏–±–∫–∞ 404</title></head>
    <body style="text-align:center;padding-top:50px;">
        <h1 style="color:red;">–£–ø—Å! –°—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ (404)</h1>
        <p>–ü–æ—Ö–æ–∂–µ, –≤—ã –∑–∞–±—Ä–µ–ª–∏ –Ω–µ —Ç—É–¥–∞.</p>
        <img src="/static/404.jpg" alt="404" width="300">
        <br><br><a href="/">–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</a>
    </body></html>
    ''', 404

# –û–±—Ä–∞–±–æ—Ç–∫–∞ 500 ‚Äî –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
@app.errorhandler(500)
def internal_error(e):
    app.logger.error(f"–û—à–∏–±–∫–∞ 500: {e}", exc_info=True)
    return '''
    <html><head><title>–û—à–∏–±–∫–∞ 500</title></head>
    <body style="text-align:center;padding-top:50px;">
        <h1 style="color:red;">–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (500)</h1>
        <p>–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ú—ã —É–∂–µ —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞–¥ —ç—Ç–∏–º!</p>
        <br><a href="/">–í–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –≥–ª–∞–≤–Ω—É—é</a>
    </body></html>
    ''', 500

if __name__ == '__main__':
    port = int(os.environ.get('PORT', 5000))
    app.run(host='0.0.0.0', port=port)